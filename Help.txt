Implementing-Advanced-RESTful-Concerns-with-ASP.NET-Core-3.1 - jmcsoberano

Supporting Paging for Collection Resources

Introducing the Demo Application
Paging through Collection Resources
Improving Reuse with a PagedList Class
Returning Pagination Metadata
Sorting Resource Collections
Sorting Resource Collections
Creating a Property Mapping Service
Creating a Reusable ApplySort Method
Adding OrderBy Clauses to Pagination Links
Taking Consumer Errors into Account When Sorting
Shaping Data
Creating a Reusable Extension Method to Shape Data
Data Shaping Collection Resources
Data Shaping Single Resources
Taking Consumer Errors into Account When Shaping Data
Learning and Implementing HATEOAS
Supporting HATOEAS
Implementing HATEOAS Support for a Single Resource
Implementing HATEOAS Support After POSTing
Implementing HATEOAS Support for a Collection Resource
Using HATEOAS for Pagination Links
Working Towards Self-discoverability with a Root Document
Improving Reliability with Advanced Content Negotiation
HATEOAS and Content Negotiation
Tightening the Contract Between Client and Server with Vendor-specific Media Types
Working with Vendor-specific Media Types on Input
Getting Started with Caching Resources
Adding Cache Headers to the Response
Adding a Cache Store with the ResponseCaching Middleware
Using Cache Profiles to Apply the Same Rules to Different Resources
Supporting HTTP Cache for ASP.NET Core APIs
Adding Support for Generating ETags
Global Cache Header Configuration
Resource-level Cache Header Configuration
Dealing with Varying Response Representations
ETags and the Validation Model
Supporting Concurrency
Supporting Concurrency
